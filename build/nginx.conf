user heimdall bifrost;
worker_processes  1;
pid /var/run/nginx/nginx.pid;

worker_priority      15;
worker_rlimit_nofile 1024;

events { worker_connections 1024; }

http {
	include			mime.types;
	default_type	application/octet-stream;

	log_format  main_timed  	'$remote_addr - $remote_user [$time_local] "$request" '
								'$status $body_bytes_sent "$http_referer" '
								'"$http_user_agent" "$http_x_forwarded_for" '
								'$request_time $upstream_response_time $pipe $upstream_cache_status';

	sendfile					on;
	tcp_nopush					on;
	tcp_nodelay					on;

	client_body_timeout			5s;
	client_max_body_size		1m;
	client_header_timeout		5s;
	client_body_buffer_size		16k;
	send_timeout				15s;
	charset						utf-8;
	gzip						on;
	gzip_static					on;
	gzip_buffers				16 8k;
	gzip_comp_level				9;
	gzip_http_version			1.0;
	gzip_min_length				0;
	gzip_types					text/plain text/css image/x-icon image/svg+xml image/png image/jpg image/jpeg text/js text/php application/javascript application/x-javascript;
	gzip_vary					on;
	gzip_proxied				expired no-cache no-store private auth;
	gzip_disable				"MSIE [1-6]\.";
	ignore_invalid_headers		on;
	keepalive_timeout			65;
	keepalive_requests			50;
	keepalive_disable			none;
	max_ranges					1;
	msie_padding				off;
	open_file_cache				max=1000 inactive=2h;
	open_file_cache_errors		on;
	open_file_cache_min_uses	1;
	open_file_cache_valid		1h;
	output_buffers				1 512;
	postpone_output				1440;
	read_ahead					512K;
	recursive_error_pages		on;
	reset_timedout_connection	on;
	server_tokens				off;
	server_name_in_redirect		off;
	source_charset				utf-8;
	limit_req_zone				$binary_remote_addr  zone=gulag:1m   rate=60r/m;

	map $status $loggable {
		~^[23]  0;
		default 1;
	}

	map $status $status_text {
		400 'Bad Request';
		401 'Unauthorized';
		402 'Payment Required';
		403 'Forbidden';
		404 'Not Found';
		405 'Method Not Allowed';
		406 'Not Acceptable';
		407 'Proxy Authentication Required';
		408 'Request Timeout';
		409 'Conflict';
		410 'Gone';
		411 'Length Required';
		412 'Precondition Failed';
		413 'Payload Too Large';
		414 'URI Too Long';
		415 'Unsupported Media Type';
		416 'Range Not Satisfiable';
		417 'Expectation Failed';
		418 'I\'m a teapot';
		421 'Misdirected Request';
		422 'Unprocessable Entity';
		423 'Locked';
		424 'Failed Dependency';
		426 'Upgrade Required';
		428 'Precondition Required';
		429 'Too Many Requests';
		431 'Request Header Fields Too Large';
		451 'Unavailable For Legal Reasons (MONTAG\'d)';
		500 'Internal Server Error';
		501 'Not Implemented';
		502 'Bad Gateway';
		503 'Service Unavailable';
		504 'Gateway Timeout';
		505 'HTTP Version Not Supported';
		506 'Variant Also Negotiates';
		507 'Insufficient Storage';
		508 'Loop Detected';
		510 'Not Extended';
		511 'Network Authentication Required';
		default 'Something is wrong';
	}

	access_log					/dev/stdout main_timed if=$loggable;
	error_log					/dev/stderr warn;

	# Header directives
	proxy_hide_header	X-Powered-By;

	add_header	Cache-Control "public";
	add_header	X-Frame-Options SAMEORIGIN;
	add_header	X-Content-Type-Options nosniff;
	add_header	X-XSS-Protection "1; mode=block";
	add_header	Strict-Transport-Security max-age=15768000;

	error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 /error.html;

    server {
        listen 9001 default_server;
        server_name _;

        root /var/www/html;
        index index.html;

        location / { try_files $uri =404; }

        # redirect server error pages to the static page /50x.html
        # test error codes
		location /errtest/502 { return 502; }
		location /errtest/503 { return 503; }
		location /errtest/504 { return 504; }
		location /errtest/451 { return 451; }

		# redirect server error pages to the static page /50x.html
		location = /error.html {
			ssi on;
			internal;
			try_files $uri $uri/ @errors;
		}

		location @errors {
			ssi on;
			internal;
			root /var/www/default;
			try_files $uri $uri/ error.html;
		}

        location ~* \.(jpg|jpeg|gif|png|ico|xml|svg|mp4|pdf)$ {
			expires max; log_not_found off; access_log off;
		}

        # try or suppress favicon
        location = /favicon.ico { try_files $uri =204; }

        # deny access to . files, for security
        location ~ /\. { log_not_found off; deny all; }

        # healthcheck endpoint for docker
		location /docker/infrastructure/healthcheck {
			add_header Content-Type text/plain;
			return 200 'healthy';
		}
    }
}
